// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace iCargoUIAutomation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("OPR344_EXP_Manifest")]
    public partial class OPR344_EXP_ManifestFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "OPR344_EXP_Manifest.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "OPR344_EXP_Manifest", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("OPR344_EXP_00001_Manifest an AWB for an Unknown Shipper on a pax flight")]
        [NUnit.Framework.CategoryAttribute("OPR344")]
        [NUnit.Framework.CategoryAttribute("OPR344_EXP_00001")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.CategoryAttribute("DataSource:../TestData/OPR344_ExportManifest_TestData.xlsx")]
        [NUnit.Framework.CategoryAttribute("DataSet:OPR344_EXP_00001")]
        [NUnit.Framework.TestCaseAttribute("ASQXGUEST", "", "C1001", "10763", "SEA", "JFK", "GENERAL", "None", "NONSCR", "None", "None", "13", "775", "CC", "None", "CART", "PlannedShipment", "", "", "", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00001", null)]
        [NUnit.Framework.TestCaseAttribute("ASQXGUEST", "", "C1001", "10763", "SEA", "JFK", "PRIORITY", "None", "2199", "None", "None", "8", "360", "CC", "None", "CART", "PlannedShipment", "", "", "", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00001", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "SEA", "JFK", "PRIORITY", "None", "2199", "None", "None", "26", "123", "CC", "None", "CART", "LyingList", "16", "", "", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00002", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "SEA", "LAX", "GENERAL", "None", "NONSCR", "None", "None", "13", "775", "CC", "None", "CART", "PlannedShipment", "", "", "", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00003", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "ANC", "HNL", "PRIORITY", "None", "2199", "None", "None", "8", "360", "CC", "None", "CART", "PlannedShipment", "", "", "", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00003", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "SAN", "JFK", "GOLDSTREAK", "None", "NONSCR", "None", "None", "2", "59", "CC", "None", "CART", "PlannedShipment", "", "", "", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00003", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "SAN", "JFK", "GENERAL", "None", "0316", "None", "None", "2", "234", "CC", "None", "CART", "PlannedShipment", "", "", "1", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00004", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "ANC", "HNL", "PRIORITY", "None", "2199", "None", "None", "10", "189", "CC", "None", "CART", "PlannedShipment", "", "", "1", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00004", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "SEA", "JFK", "GENERAL", "None", "0316", "None", "None", "2", "59", "CC", "None", "CART", "PlannedShipment", "", "26", "", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00005", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "BOS", "SEA", "PRIORITY", "DGR", "NONSCR", "UN8000", "None", "1", "30", "PP", "CREDIT", "CART", "PlannedShipment", "", "", "", "8000", "Consumer commodity", "Y963", "0.5", "No", "", "", "Yes", "OPR344_EXP_00006", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "BOS", "SEA", "PRIORITY", "DGR", "NONSCR", "UN1845", "None", "2", "65", "PP", "CREDIT", "CART", "PlannedShipment", "", "", "", "1845", "Dry ice", "954", "0.5", "No", "", "", "Yes", "OPR344_EXP_00006", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "BOS", "SEA", "PRIORITY", "DGR", "NONSCR", "UN3110", "None", "3", "99", "PP", "CREDIT", "CART", "PlannedShipment", "", "", "", "3110", "Organic peroxide type F, solid *", "570", "0.5", "No", "", "", "Yes", "OPR344_EXP_00006", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "SEA", "ANC", "GENERAL", "None", "NONSCR", "None", "None", "2", "59", "CC", "None", "CART", "PlannedShipment", "", "", "", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00010", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "ANC", "OME", "GENERAL", "None", "NONSCR", "None", "None", "2", "59", "CC", "None", "CART", "PlannedShipment", "", "", "", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00011", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "ANC", "OME", "PRIORITY", "None", "2199", "None", "None", "10", "287", "CC", "None", "CART", "PlannedShipment", "", "", "", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00011", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "ANC", "OME", "GENERAL", "None", "NONSCR", "None", "None", "2", "59", "CC", "None", "CART", "LyingList", "155", "", "", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00012", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "SEA", "JFK", "GENERAL", "None", "NONSCR", "None", "None", "14", "198", "CC", "None", "CART", "PlannedShipment", "", "", "", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00013", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "SEA", "JFK", "GENERAL", "None", "NONSCR", "None", "None", "2", "59", "CC", "None", "CART", "PlannedShipment", "", "", "", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00014", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "SEA", "JFK", "GENERAL", "None", "0316", "None", "None", "2", "59", "CC", "None", "CART", "PlannedShipment", "", "26", "", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00015", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "ANC", "OME", "PRIORITY", "DGR,CAO", "NONSCR", "UN3480", "None", "1", "30", "CC", "None", "CART", "LyingList", "155", "", "", "3480", "Lithium ion batteries", "965", "0.5", "No", "", "", "Yes", "OPR344_EXP_00017", null)]
        [NUnit.Framework.TestCaseAttribute("ASQXGUEST", "", "C1001", "11377", "ANC", "OME", "GENERAL", "None", "NONSCR", "None", "None", "2", "59", "CC", "None", "CART", "LyingList", "155", "", "", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00018", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "ANC", "OME", "PRIORITY", "DGR,CAO", "NONSCR", "UN3480", "None", "1", "30", "CC", "None", "CART", "PlannedShipment", "", "", "", "3480", "Lithium ion batteries", "965", "0.5", "No", "ANC", "CAO", "Yes", "OPR344_EXP_00020", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "SEA", "LAX", "GENERAL", "None", "NONSCR", "None", "None", "2", "59", "CC", "None", "CART", "PlannedShipment", "", "", "", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00021", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "SEA", "ANC", "GENERAL", "None", "NONSCR", "None", "None", "2", "59", "CC", "None", "CART", "PlannedShipment", "", "", "", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00022", null)]
        [NUnit.Framework.TestCaseAttribute("ASQXGUEST", "", "C1001", "11377", "SEA", "ANC", "GENERAL", "None", "NONSCR", "None", "None", "2", "60", "CC", "None", "CART", "LyingList", "173", "", "1", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00025", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "SEA", "ANC", "GENERAL", "None", "NONSCR", "None", "None", "2", "60", "CC", "None", "CART", "LyingList", "173", "", "1", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00026", null)]
        [NUnit.Framework.TestCaseAttribute("11377", "11377", "", "11377", "SEA", "ANC", "GENERAL", "None", "NONSCR", "None", "None", "2", "60", "CC", "None", "CART", "LyingList", "173", "", "1", "", "", "", "", "", "", "", "Yes", "OPR344_EXP_00027", null)]
        public void OPR344_EXP_00001_ManifestAnAWBForAnUnknownShipperOnAPaxFlight(
                    string agentCode, 
                    string shipperCode, 
                    string unknownShipperCode, 
                    string consigneeCode, 
                    string origin, 
                    string destination, 
                    string productCode, 
                    string sCC, 
                    string commodity, 
                    string shipmentDescription, 
                    string serviceCargoClass, 
                    string piece, 
                    string weight, 
                    string chargeType, 
                    string modeOfPayment, 
                    string cartType, 
                    string aWBSectionName, 
                    string flightNumber, 
                    string newFlightNumber, 
                    string splitPieces, 
                    string uNID, 
                    string properShipmentName, 
                    string packingInstruction, 
                    string netQtyPerPkg, 
                    string reportableQnty, 
                    string station, 
                    string handlingCode, 
                    string execute, 
                    string tags, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "OPR344",
                    "OPR344_EXP_00001",
                    "smoke",
                    "DataSource:../TestData/OPR344_ExportManifest_TestData.xlsx",
                    "DataSet:OPR344_EXP_00001"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("AgentCode", agentCode);
            argumentsOfScenario.Add("ShipperCode", shipperCode);
            argumentsOfScenario.Add("UnknownShipperCode", unknownShipperCode);
            argumentsOfScenario.Add("ConsigneeCode", consigneeCode);
            argumentsOfScenario.Add("Origin", origin);
            argumentsOfScenario.Add("Destination", destination);
            argumentsOfScenario.Add("ProductCode", productCode);
            argumentsOfScenario.Add("SCC", sCC);
            argumentsOfScenario.Add("Commodity", commodity);
            argumentsOfScenario.Add("ShipmentDescription", shipmentDescription);
            argumentsOfScenario.Add("ServiceCargoClass", serviceCargoClass);
            argumentsOfScenario.Add("Piece", piece);
            argumentsOfScenario.Add("Weight", weight);
            argumentsOfScenario.Add("ChargeType", chargeType);
            argumentsOfScenario.Add("ModeOfPayment", modeOfPayment);
            argumentsOfScenario.Add("cartType", cartType);
            argumentsOfScenario.Add("AWBSectionName", aWBSectionName);
            argumentsOfScenario.Add("FlightNumber", flightNumber);
            argumentsOfScenario.Add("NewFlightNumber", newFlightNumber);
            argumentsOfScenario.Add("SplitPieces", splitPieces);
            argumentsOfScenario.Add("UNID", uNID);
            argumentsOfScenario.Add("ProperShipmentName", properShipmentName);
            argumentsOfScenario.Add("PackingInstruction", packingInstruction);
            argumentsOfScenario.Add("NetQtyPerPkg", netQtyPerPkg);
            argumentsOfScenario.Add("ReportableQnty", reportableQnty);
            argumentsOfScenario.Add("Station", station);
            argumentsOfScenario.Add("HandlingCode", handlingCode);
            argumentsOfScenario.Add("Execute", execute);
            argumentsOfScenario.Add("Tags", tags);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("OPR344_EXP_00001_Manifest an AWB for an Unknown Shipper on a pax flight", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given(string.Format("User wants to execute the example \"{0}\"", execute), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When(string.Format("User switches station if BaseStation other than \"{0}\"", origin), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.And("User enters the screen name as \'LTE001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
 testRunner.Then("User enters into the  iCargo \'Create Shipment\' page successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 9
 testRunner.When("user clicks on the List button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.And(string.Format("User enters the Participant details with AgentCode \"{0}\",Unknown ShipperCode \"{1}" +
                            "\", ConsigneeCode \"{2}\"", agentCode, unknownShipperCode, consigneeCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And("User clicks on the ContinueParticipant button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And("User enters the Certificate details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And("User clicks on the ContinueCertificate button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And(string.Format("User enters the Shipment details with Origin \"{0}\", Destination \"{1}\", ProductCod" +
                            "e \"{2}\", SCCCode \"{3}\", Commodity \"{4}\", ShipmentDescription\"{5}\", ServiceCargoC" +
                            "lass \"{6}\", Piece \"{7}\", Weight \"{8}\"", origin, destination, productCode, sCC, commodity, shipmentDescription, serviceCargoClass, piece, weight), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And("User clicks on the ContinueShipment button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.And("User clicks on the Select Flight Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.And("User selects an \"Combination\" flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("User clicks on the ContinueFlightDetails button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And(string.Format("User enters the Charge details with ChargeType \"{0}\" and ModeOfPayment \"{1}\"", chargeType, modeOfPayment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And("User clicks on the CalculateCharges button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And("User clicks on the ContinueChargeDetails button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And("User enters the Acceptance details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And("User clicks on the ContinueAcceptanceDetails button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.And("User clicks on the ContinueScreeningDetails button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And("User checks the AWB_Verified checkbox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And("User saves the shipment details validate error message as \"The Shipper does not h" +
                        "ave a Valid Certificate Type\" and capture AWB number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.When("User enters the screen name as \'OPR344\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.Then("User enters into the  iCargo \'Export Manifest\' page successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
 testRunner.When("User enters the Booked FlightNumber with \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.And("User enters Booked ShipmentDate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
 testRunner.And("User clicks on the List button to fetch the Booked Shipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And(string.Format("User creates new ULD/Cart in Assigned Shipment with cartType \"{0}\" and pou \"{1}\"", cartType, destination), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.And(string.Format("User filterouts the Booked AWB from \'{0}\' and Created ULD_Cart", aWBSectionName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.And("User validates the error popover message as \"AWB is not accepted\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.Then("User closes the Export Manifest screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
